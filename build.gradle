plugins {
	id 'org.springframework.boot' version '2.6.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

def appCDSDir = "${projectDir}/appcds"
def snapshotJarName = "${rootProject.name}-${version}.jar"

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/release' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation 'com.tencentcloudapi:tencentcloud-sdk-java:3.1.462'

}

tasks.named('test') {
	useJUnitPlatform()
}

task prepareCDSFiles(type: Copy) {
	doFirst {
		delete(appCDSDir)
		mkdir(appCDSDir)
	}
	from(layout.buildDirectory){
		include("libs/${snapshotJarName}")
	}
	from "scf_bootstrap"
	from "application.properties"
	eachFile {
      path = name
    }
	includeEmptyDirs = false

	into appCDSDir
}

task generateClassList(type: JavaExec, dependsOn:  prepareCDSFiles) {
	doFirst {
		delete("${appCDSDir}/classes.lst")
	}
	
	workingDir = appCDSDir
	main = "-jar"
	jvmArgs = [ 
		"-Xshare:off", 
		"-XX:+UseAppCDS", 
		"-XX:DumpLoadedClassList=classes.lst"
	]
	args snapshotJarName
}

task generateAppCDSArchive(type: JavaExec) {
	doFirst {
		delete("${appCDSDir}/classes.jsa")
	}

	workingDir = appCDSDir
	main = "-jar"
    jvmArgs "-Xshare:dump", "-XX:+UseAppCDS", "-XX:SharedClassListFile=classes.lst",
            "-XX:SharedArchiveFile=classes.jsa", "-Xlog:class+load=info", "-Xlog:class+path=info"

	args snapshotJarName
}

task RunApplicationWithAppCDS(type: JavaExec) {
	workingDir = appCDSDir
	main = "-jar"
	jvmArgs "-Xshare:on", "-XX:+UseAppCDS", "-XX:SharedArchiveFile=classes.jsa"
	args snapshotJarName
}

task buildZip(type: Zip) {
	from(appCDSDir)
}